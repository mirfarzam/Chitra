{"version":3,"sources":["logo.svg","Components/formComponents/Submit.js","Components/formComponents/TextInput.js","Components/formComponents/Checkbox.js","App.js","Reducers/countReducer.js","Stores/configureStore.js","serviceWorker.js","index.js"],"names":["module","exports","Submit","props","className","this","active","type","value","React","Component","connect","state","ownProps","form","submit","TextInput","placeholder","Checkbox","children","App","href","countReducer","action","console","log","initialState","configureStore","createStore","Boolean","window","location","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,oLCKrCC,E,kDACF,WAAaC,GAAQ,IAAD,8BAChB,cAAMA,IACDA,MAAQA,EAFG,E,qDAOhB,OAAO,2BAAOC,UAAS,UAAKC,KAAKF,MAAMG,OAAS,SAAW,IAAMC,KAAM,SAAUC,MAAK,UAAKH,KAAKF,MAAMK,a,GARzFC,IAAMC,WAyBZC,mBAXf,SAAyBC,EAAOC,GAC5B,MAAQ,CACLP,OAASM,EAAME,KAAKC,UAWvB,KAFWJ,CAGbT,GCUac,E,kDAxCX,WAAab,GAAQ,IAAD,8BAChB,cAAMA,IACDA,MAAQA,EAFG,E,qDAMhB,OAAQE,KAAKF,MAAMI,MACf,IAAK,kBACD,OACI,iCACI,sIACA,2BAAOA,KAAM,OAAQU,YAAa,iBAAkBb,UAAW,qCAG3E,IAAK,QACD,OACI,iCACI,iEACA,2BAAOG,KAAM,OAAQU,YAAa,iBAAkBb,UAAW,qCAG3E,IAAK,WACD,OACI,iCACI,0FACA,2BAAOG,KAAM,OAAQU,YAAa,cAAeb,UAAW,qCAGxE,IAAK,WACD,OACI,iCACI,8EACA,2BAAOG,KAAM,WAAYU,YAAa,mFAAmBb,UAAW,oB,GAjCpEK,IAAMC,WCiBfQ,E,kDAhBX,WAAYf,GAAQ,IAAD,8BACf,cAAMA,IACDA,MAAQA,EAFE,E,qDAMf,OACI,2BAAOC,UAAU,qBACb,2BAAOG,KAAK,aACZ,0BAAMH,UAAU,cACfC,KAAKF,MAAMgB,c,GAXLV,IAAMC,WCqEdU,MA5Df,WACE,OACE,yBAAKhB,UAAU,OACb,yBAAKA,UAAW,2BACd,yBAAKA,UAAW,WACZ,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,OACZ,yBAAKA,UAAW,YACZ,wBAAIA,UAAW,SAAf,6BAEJ,yBAAKA,UAAW,YACZ,uBAAGA,UAAW,aAAciB,KAAM,KAAlC,6CAEI,kCAIZ,yBAAKjB,UAAW,OACZ,yBAAKA,UAAW,aACZ,uBAAGA,UAAW,eAAd,oNAKR,yBAAKA,UAAW,OACZ,8BACI,yBAAKA,UAAW,aACZ,kBAAC,EAAD,CAAWG,KAAM,oBACjB,kBAAC,EAAD,CAAWA,KAAM,aACjB,kBAAC,EAAD,gGAGA,kBAAC,EAAD,CAAQC,MAAO,gCAI3B,yBAAKJ,UAAW,OACZ,yBAAKA,UAAW,yBACZ,uBAAGA,UAAW,aAAciB,KAAM,KAAlC,wI,QC9CXC,EAAe,WAAyC,IAA/BV,EAA8B,uDAH/C,EAGuCW,EAAQ,uCAChE,OAAQA,EAAOhB,MACX,IAAK,YAED,OADAiB,QAAQC,IAAIb,GACLA,EAAQ,EACnB,IAAK,YACD,OAAOA,EAAQ,EACnB,QACI,OAAOA,ICPbc,EAAe,CACjBZ,KAAO,CACHC,QAAS,IAQFY,MAJf,WAA+C,IAAvBf,EAAsB,uDAAdc,EAC5B,OAAOE,YAAYN,EAAaV,I,QCChBiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACL,kBAAC,IAAD,CAAUC,MAAOT,KACb,kBAAC,EAAD,OAENU,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.3a8470bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport {decreamentAction, increamentAction} from \"../../Actions/counterActions\";\nimport connect from \"react-redux/es/connect/connect\";\n\n\nclass Submit extends React.Component {\n    constructor (props) {\n        super(props) ;\n        this.props = props;\n\n    }\n\n    render() {\n        return <input className={`${this.props.active ? \"active\" : \"\"}`} type={\"submit\"} value={`${this.props.value}`}/>;\n    }\n\n}\n\n\nfunction mapStateToProps(state, ownProps) {\n    return  {\n       active : state.form.submit\n    }\n}\n\n// const mapDispatchToProps = dispatch => ({\n//     addOne : () => dispatch(increamentAction),\n//     minusOne : () => dispatch(decreamentAction)\n// });\n\nexport default connect(\n    mapStateToProps,\n    null\n)(Submit);\n","import React from 'react'\n\nclass TextInput extends React.Component {\n    constructor (props) {\n        super(props);\n        this.props = props;\n    }\n\n    render() {\n        switch (this.props.type) {\n            case \"usernameOrEmail\":\n                return (\n                    <section>\n                        <label>ایمیل یا نام کاربری</label>\n                        <input type={\"text\"} placeholder={\"nima@gmail.com\"} className={\"text-left placeholder-text-left\"}/>\n                    </section>\n                );\n            case \"email\":\n                return (\n                    <section>\n                        <label>ایمیل</label>\n                        <input type={\"text\"} placeholder={\"nima@gmail.com\"} className={\"text-left placeholder-text-left\"}/>\n                    </section>\n                );\n            case \"username\":\n                return (\n                    <section>\n                        <label>نام کاربری</label>\n                        <input type={\"text\"} placeholder={\"nima_hamedi\"} className={\"text-left placeholder-text-left\"}/>\n                    </section>\n                );\n            case \"password\":\n                return (\n                    <section>\n                        <label>رمز عبور</label>\n                        <input type={\"password\"} placeholder={\"حداقل ۸ کاراکتر\"} className={\"text-left\"}/>\n                    </section>\n                );\n        }\n    }\n}\n\n\nexport default TextInput;","import React from 'react'\n\nclass Checkbox extends React.Component {\n    constructor(props) {\n        super(props);\n        this.props = props;\n    }\n\n    render() {\n        return (\n            <label className=\"checkBoxcontainer\">\n                <input type=\"checkbox\"/>\n                <span className=\"checkmark\"/>\n                {this.props.children}\n            </label>\n        );\n    }\n}\n\nexport default Checkbox;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './Styles/fonts.css';\nimport './Styles/App.css';\n\nimport {increamentAction, decreamentAction} from './Actions/counterActions'\nimport connect from \"react-redux/es/connect/connect\";\nimport Submit from \"./Components/formComponents/Submit\";\nimport TextInput from \"./Components/formComponents/TextInput\";\nimport Checkbox from \"./Components/formComponents/Checkbox\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className={\"fullbox bsefid gocenter\"}>\n        <div className={\"formBox\"}>\n            <div className={\"container\"}>\n                <div className={\"row\"}>\n                    <div className={\"col-sm-6\"}>\n                        <h4 className={\"title\"}>ورود</h4>\n                    </div>\n                    <div className={\"col-sm-6\"}>\n                        <a className={\"sisFormBox\"} href={\"#\"}>\n                           ثبت‌نام\n                            <span></span>\n                        </a>\n                    </div>\n                </div>\n                <div className={\"row\"}>\n                    <div className={\"col-sm-12\"}>\n                        <p className={\"description\"}>\n                            برای ورود به پنل اطلاعات خود را وارد کنید\n                        </p>\n                    </div>\n                </div>\n                <div className={\"row\"}>\n                    <form>\n                        <div className={\"col-sm-12\"}>\n                            <TextInput type={\"usernameOrEmail\"}/>\n                            <TextInput type={\"password\"}/>\n                            <Checkbox>\n                                مرا به خاطر بسپار\n                            </Checkbox>\n                            <Submit value={\"ورود\"}/>\n                        </div>\n                    </form>\n                </div>\n                <div className={\"row\"}>\n                    <div className={\"col-sm-12 text-center\"}>\n                        <a className={\"altFormBox\"} href={\"#\"}>رمز عبورم را فراموش کردم.</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\n// const mapStateToProps = state =>({\n//     ...state\n// });\n//\n// const mapDispatchToProps = dispatch => ({\n//    addOne : () => dispatch(increamentAction),\n//    minusOne : () => dispatch(decreamentAction)\n// });\n//\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\n\nexport default App;","const initialState = 0;\n\n\nexport const countReducer = function (state = initialState, action) {\n    switch (action.type) {\n        case \"INCREMENT\":\n            console.log(state);\n            return state + 1;\n        case \"DECREMENT\":\n            return state - 1;\n        default:\n            return state;\n    }\n};","import { createStore } from \"redux\";\nimport  { countReducer } from \"../Reducers/countReducer\";\n\n\nconst initialState = {\n    form : {\n        submit : false\n    }\n};\n\nfunction configureStore(state = initialState) {\n    return createStore(countReducer,state);\n}\n\nexport default configureStore;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport configureStore from \"./Stores/configureStore\"\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={configureStore()}>\n        <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}